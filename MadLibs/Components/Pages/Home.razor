@page "/"
@using MadLibs.Components.Widgets
@using MadLibs.Data
@using MadLibs.Models
@inject IStoriesRepository _storiesRepository
@inject NavigationManager _navigationManager

<PageTitle>Home</PageTitle>
<MudText Typo="Typo.h1" Color="Color.Primary" Align="Align.Center">MadLibs!!</MudText>
<MudText Color="Color.Dark" Typo="Typo.subtitle1" Align="Align.Center">Select from the following themes to start creating your own story</MudText>
<MudGrid Class="mt-3" Spacing="15" Justify="Justify.Center">
    @foreach (var theme in StoriesByTheme)
    {
        <MudItem xs="12" md="6">
            <MudLink OnClick="() => ToggleCollapse(theme.Key)">
                <MudCard Elevation="3" Style="background-color: var(--mud-palette-primary)">
                    <MudCardMedia Image="@theme.Value.First().ImagePath" Height="200" />
                    <MudCardContent>
                        <MudText Color="Color.Secondary" Typo="Typo.h5">@theme.Value.First().ThemeName</MudText>
                        <MudText Color="Color.Tertiary" Typo="Typo.body2">Epic journeys powered by magic and questionable decisions in a WiFi Castle!</MudText>
                    </MudCardContent>
                </MudCard>
            </MudLink>
            <MudCollapse Expanded="@theme.Value.First().IsExpanded">
                <MudList T="string">
                    @foreach (var story in theme.Value)
                    {
                        <MudListItem>
                            <MudText>@story.Title</MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudCollapse>
        </MudItem>
    }
</MudGrid>

@code {
    private List<StoriesViewModel> StoriesViewModels = new();
    private Dictionary<int, List<StoriesViewModel>> StoriesByTheme = new(); 
    private int SelectedThemeId = 0;
    private StoriesViewModel? SelectedStory = null;

    protected override async Task OnInitializedAsync()
    {
        StoriesViewModels = (await _storiesRepository.GetStoriesViewModelsAsync()).ToList();
        StoriesByTheme = StoriesViewModels
            .GroupBy(s => s.ThemeId)
            .ToDictionary(
                g => g.Key,
                g => g.ToList()
            );
    }

    private void ToggleCollapse(int themeId)
    {
        if (StoriesByTheme.TryGetValue(themeId, out var stories))
        {
            var isExpanded = stories.First().IsExpanded;
            foreach (var story in stories)
            {
                story.IsExpanded = !isExpanded;
            }
        }
    }

    private void SelectTheme(int themeId)  
    {
        var stories = StoriesByTheme.TryGetValue(themeId, out var storiesViewModels) ? storiesViewModels : new List<StoriesViewModel>();
        var themeName = stories.First().ThemeName;
        _navigationManager.NavigateTo($"/madlibs?themeId={themeId}");
    }
}